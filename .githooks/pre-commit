#!/usr/bin/env bash
#
# Pre-commit hook for secret detection and basic validation
# Prevents accidental commits of secrets, credentials, and sensitive data
#
# Installation:
#   git config core.hooksPath .githooks
#   chmod +x .githooks/pre-commit
#

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}[i] Running pre-commit checks...${NC}"

# Track if we found any issues
ISSUES_FOUND=0

# ==============================================================================
# 1. Check for common secret patterns
# ==============================================================================

echo -e "${CYAN}[*] Checking for secrets and credentials...${NC}"

SECRET_PATTERNS=(
    "password\s*=\s*['\"][^'\"]{3,}"
    "api[_-]?key\s*=\s*['\"][^'\"]{10,}"
    "secret\s*=\s*['\"][^'\"]{10,}"
    "token\s*=\s*['\"][^'\"]{10,}"
    "BEGIN RSA PRIVATE KEY"
    "BEGIN OPENSSH PRIVATE KEY"
    "BEGIN PRIVATE KEY"
    "BEGIN EC PRIVATE KEY"
)

for pattern in "${SECRET_PATTERNS[@]}"; do
    if git diff --cached --diff-filter=ACM | grep -iE "$pattern" > /dev/null; then
        echo -e "${RED}[-] FAIL: Potential secret detected matching pattern: $pattern${NC}"
        ISSUES_FOUND=1
    fi
done

if [ $ISSUES_FOUND -eq 0 ]; then
    echo -e "${GREEN}  [+] No obvious secrets detected${NC}"
fi

# ==============================================================================
# 2. Check for private IP addresses (except in gitignored files)
# ==============================================================================

echo -e "${CYAN}[*] Checking for private IP addresses...${NC}"

PRIVATE_IP_PATTERNS=(
    "10\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
    "172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]{1,3}\.[0-9]{1,3}"
    "192\.168\.[0-9]{1,3}\.[0-9]{1,3}"
)

# Get list of staged files (excluding gitignored paths)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -vE '(\.gitignore|\.env\.example|\.claude/|docs/SECURITY\.md)')

if [ -n "$STAGED_FILES" ]; then
    for pattern in "${PRIVATE_IP_PATTERNS[@]}"; do
        for file in $STAGED_FILES; do
            if [ -f "$file" ]; then
                if grep -E "$pattern" "$file" > /dev/null 2>&1; then
                    echo -e "${YELLOW}  [!] WARNING: Private IP found in $file${NC}"
                    echo -e "${YELLOW}      Consider using RFC 5737 documentation IPs (192.0.2.x, 198.51.100.x, 203.0.113.x)${NC}"
                    # Not blocking, just warning
                fi
            fi
        done
    done
fi

# ==============================================================================
# 3. Check for forbidden filenames
# ==============================================================================

echo -e "${CYAN}[*] Checking for forbidden file types...${NC}"

FORBIDDEN_PATTERNS=(
    "\.pem$"
    "\.key$"
    "\.p12$"
    "\.pfx$"
    "id_rsa$"
    "id_ed25519$"
    "id_ecdsa$"
    "credentials\.json$"
    "auth\.json$"
    "\.env\.local$"
)

for file in $(git diff --cached --name-only --diff-filter=A); do
    for pattern in "${FORBIDDEN_PATTERNS[@]}"; do
        if echo "$file" | grep -E "$pattern" > /dev/null; then
            echo -e "${RED}[-] FAIL: Attempting to commit forbidden file: $file${NC}"
            echo -e "${RED}    This file type should be in .gitignore${NC}"
            ISSUES_FOUND=1
        fi
    done
done

if [ $ISSUES_FOUND -eq 0 ]; then
    echo -e "${GREEN}  [+] No forbidden files detected${NC}"
fi

# ==============================================================================
# 4. Check for large files (>1MB)
# ==============================================================================

echo -e "${CYAN}[*] Checking for large files...${NC}"

for file in $(git diff --cached --name-only --diff-filter=A); do
    if [ -f "$file" ]; then
        size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo 0)
        if [ "$size" -gt 1048576 ]; then
            echo -e "${YELLOW}  [!] WARNING: Large file detected: $file ($(($size / 1024))KB)${NC}"
            echo -e "${YELLOW}      Consider using Git LFS for large files${NC}"
            # Not blocking, just warning
        fi
    fi
done

# ==============================================================================
# 5. Basic PowerShell syntax check (if pwsh is available)
# ==============================================================================

if command -v pwsh > /dev/null 2>&1; then
    echo -e "${CYAN}[*] Validating PowerShell syntax...${NC}"

    for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.ps1$'); do
        if [ -f "$file" ]; then
            if ! pwsh -NoProfile -NonInteractive -Command "try { \$null = [System.Management.Automation.PSParser]::Tokenize((Get-Content '$file' -Raw), [ref]\$null); exit 0 } catch { Write-Host \$_.Exception.Message; exit 1 }" 2>&1; then
                echo -e "${RED}[-] FAIL: PowerShell syntax error in $file${NC}"
                ISSUES_FOUND=1
            else
                echo -e "${GREEN}  [+] $file syntax valid${NC}"
            fi
        fi
    done
fi

# ==============================================================================
# 6. Basic Bash syntax check
# ==============================================================================

echo -e "${CYAN}[*] Validating Bash syntax...${NC}"

for file in $(git diff --cached --name-only --diff-filter=ACM | grep '\.sh$'); do
    if [ -f "$file" ]; then
        if ! bash -n "$file" 2>&1; then
            echo -e "${RED}[-] FAIL: Bash syntax error in $file${NC}"
            ISSUES_FOUND=1
        else
            echo -e "${GREEN}  [+] $file syntax valid${NC}"
        fi
    fi
done

# ==============================================================================
# Final decision
# ==============================================================================

echo ""
if [ $ISSUES_FOUND -ne 0 ]; then
    echo -e "${RED}[X] Pre-commit checks FAILED${NC}"
    echo -e "${RED}    Review the errors above and fix before committing${NC}"
    echo -e "${YELLOW}    To bypass this check (NOT RECOMMENDED): git commit --no-verify${NC}"
    exit 1
else
    echo -e "${GREEN}[+] All pre-commit checks PASSED${NC}"
    exit 0
fi
