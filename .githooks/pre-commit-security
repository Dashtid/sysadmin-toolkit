#!/usr/bin/env bash
#
# Pre-commit hook: Security checks
# Prevents committing files with potential security issues
#
# Install: ln -s ../../.githooks/pre-commit-security .git/hooks/pre-commit
# Or: git config core.hooksPath .githooks

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}[i] Running pre-commit security checks...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}[+] No files to check${NC}"
    exit 0
fi

# Initialize error flag
HAS_ERRORS=0

# ============================================================================
# CHECK 1: Detect potential secrets
# ============================================================================

echo -e "${BLUE}[i] Checking for potential secrets...${NC}"

SECRET_PATTERNS=(
    'password\s*=\s*['"'"'"][^'"'"'"]+'
    'apikey\s*=\s*['"'"'"][^'"'"'"]+'
    'api_key\s*=\s*['"'"'"][^'"'"'"]+'
    'secret\s*=\s*['"'"'"][^'"'"'"]+'
    'token\s*=\s*['"'"'"][^'"'"'"]+'
    'access_token\s*=\s*['"'"'"][^'"'"'"]+'
    'auth\s*=\s*['"'"'"][^'"'"'"]+'
    'bearer\s+[A-Za-z0-9\-\._~\+\/]+'
    'sk-[A-Za-z0-9]{20,}'  # API key pattern
    'ghp_[A-Za-z0-9]{36}'   # GitHub personal access token
    'gho_[A-Za-z0-9]{36}'   # GitHub OAuth token
)

for file in $STAGED_FILES; do
    # Skip binary files and images
    if file "$file" | grep -qE 'executable|binary|image'; then
        continue
    fi

    for pattern in "${SECRET_PATTERNS[@]}"; do
        if git diff --cached "$file" | grep -iE "$pattern" > /dev/null; then
            echo -e "${RED}[-] Potential secret found in $file${NC}"
            echo -e "${YELLOW}    Pattern: $pattern${NC}"
            HAS_ERRORS=1
        fi
    done
done

# ============================================================================
# CHECK 2: Detect sensitive files
# ============================================================================

echo -e "${BLUE}[i] Checking for sensitive files...${NC}"

SENSITIVE_PATTERNS=(
    '\.pem$'
    '\.key$'
    '\.pfx$'
    '\.p12$'
    '\.jks$'
    'id_rsa$'
    'id_ed25519$'
    'id_ecdsa$'
    '\.env$'
    '\.env\.local$'
    'credentials\.json$'
    'auth\.json$'
    '\.aws/credentials$'
    '\.ssh/id_'
)

for file in $STAGED_FILES; do
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        if echo "$file" | grep -E "$pattern" > /dev/null; then
            # Check if it's in .gitignore exceptions (like .env.example)
            if [[ "$file" == *".example"* ]]; then
                continue
            fi
            echo -e "${RED}[-] Sensitive file detected: $file${NC}"
            echo -e "${YELLOW}    This file type should typically not be committed${NC}"
            HAS_ERRORS=1
        fi
    done
done

# ============================================================================
# CHECK 3: Detect large files
# ============================================================================

echo -e "${BLUE}[i] Checking for large files (>5MB)...${NC}"

MAX_FILE_SIZE=$((5 * 1024 * 1024))  # 5MB in bytes

for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        FILE_SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo 0)
        if [ "$FILE_SIZE" -gt "$MAX_FILE_SIZE" ]; then
            SIZE_MB=$((FILE_SIZE / 1024 / 1024))
            echo -e "${YELLOW}[!] Large file detected: $file (${SIZE_MB}MB)${NC}"
            echo -e "${YELLOW}    Consider using Git LFS for files larger than 5MB${NC}"
            # Don't set error flag, just warn
        fi
    fi
done

# ============================================================================
# CHECK 4: Detect TODO/FIXME comments with sensitive information
# ============================================================================

echo -e "${BLUE}[i] Checking TODO/FIXME comments...${NC}"

SENSITIVE_TODO_PATTERNS=(
    'TODO.*password'
    'FIXME.*password'
    'TODO.*secret'
    'FIXME.*secret'
    'TODO.*token'
    'FIXME.*token'
    'TODO.*hack'
    'FIXME.*hack'
)

for file in $STAGED_FILES; do
    # Skip binary files
    if file "$file" | grep -qE 'executable|binary|image'; then
        continue
    fi

    for pattern in "${SENSITIVE_TODO_PATTERNS[@]}"; do
        if git diff --cached "$file" | grep -iE "$pattern" > /dev/null; then
            echo -e "${YELLOW}[!] Sensitive TODO/FIXME found in $file${NC}"
            echo -e "${YELLOW}    Pattern: $pattern${NC}"
            echo -e "${YELLOW}    Review before committing${NC}"
            # Don't set error flag, just warn
        fi
    done
done

# ============================================================================
# CHECK 5: Check for private IP addresses (warn only)
# ============================================================================

echo -e "${BLUE}[i] Checking for private IP addresses...${NC}"

PRIVATE_IP_PATTERNS=(
    '10\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
    '172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]{1,3}\.[0-9]{1,3}'
    '192\.168\.[0-9]{1,3}\.[0-9]{1,3}'
)

# Files that are allowed to have private IPs (configuration examples, docs)
ALLOWED_PRIVATE_IP_FILES=(
    'README.md'
    'CLAUDE.md'
    '.env.example'
    'docs/'
    'examples/'
)

for file in $STAGED_FILES; do
    # Skip binary files and allowed files
    if file "$file" | grep -qE 'executable|binary|image'; then
        continue
    fi

    SKIP_FILE=false
    for allowed in "${ALLOWED_PRIVATE_IP_FILES[@]}"; do
        if [[ "$file" == *"$allowed"* ]]; then
            SKIP_FILE=true
            break
        fi
    done

    if [ "$SKIP_FILE" = true ]; then
        continue
    fi

    for pattern in "${PRIVATE_IP_PATTERNS[@]}"; do
        if git diff --cached "$file" | grep -E "$pattern" > /dev/null; then
            # Check if it's an RFC 5737 example IP
            if echo "$file" | grep -vE '192\.0\.2\.|198\.51\.100\.|203\.0\.113\.' > /dev/null; then
                echo -e "${YELLOW}[!] Private IP address found in $file${NC}"
                echo -e "${YELLOW}    Consider using RFC 5737 example IPs (192.0.2.x, 198.51.100.x, 203.0.113.x)${NC}"
                # Don't set error flag for docs/examples, just warn
            fi
        fi
    done
done

# ============================================================================
# RESULTS
# ============================================================================

echo ""
if [ $HAS_ERRORS -eq 1 ]; then
    echo -e "${RED}[-] ========================================${NC}"
    echo -e "${RED}[-] PRE-COMMIT HOOK FAILED${NC}"
    echo -e "${RED}[-] Security issues detected${NC}"
    echo -e "${RED}[-] ========================================${NC}"
    echo ""
    echo -e "${YELLOW}To bypass this check (NOT RECOMMENDED):${NC}"
    echo -e "${YELLOW}  git commit --no-verify${NC}"
    echo ""
    exit 1
else
    echo -e "${GREEN}[+] ========================================${NC}"
    echo -e "${GREEN}[+] All security checks passed${NC}"
    echo -e "${GREEN}[+] ========================================${NC}"
    exit 0
fi
